<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="junit5:TestMethod">
        <description>
            Finds all test methods (i.e. annotated with "@org.junit.jupiter.api.Test") and
            labels them with "Test" and "Junit5".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.Test"
            SET
              m:Test:Junit5
            RETURN
              m AS Test
        ]]></cypher>
    </concept>

    <concept id="junit5:RepeatedTestMethod">
        <description>
            Finds all test methods (i.e. annotated with "@org.junit.jupiter.api.Test") and
            labels them with "Test", "Repeated", and "Junit5".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.RepeatedTest"
            SET
              m:Repeated:Test:Junit5
            RETURN
              m AS Test
        ]]></cypher>
    </concept>

    <concept id="junit5:ParameterizedTestMethod">
        <description>
            Finds all test methods (i.e. annotated with "@org.junit.jupiter.api.ParameterizedTest") and
            labels them with "Test", "Paramterized", and "Junit5".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.params.ParameterizedTest"
            SET
              m:Parameterized:Test:Junit5
            RETURN
              m AS Test
        ]]></cypher>
    </concept>

    <concept id="junit5:DisabledTestClassOrMethod">
        <description>
            Labels all classes or methods annotated with "@org.junit.jupiter.api.Disabled"
            with "Junit5" and "Ignore".
        </description>
        <cypher><![CDATA[
            MATCH
              (e)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.Disabled"
            SET
              e:Junit5:Disabled
            RETURN
              e AS IgnoredElement
        ]]></cypher>
    </concept>

    <concept id="junit5:BeforeEach">
        <description>
            Labels all methods annotated by "@org.junit.jupiter.api.BeforeEach"
            with "Junit5" and "Before".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.BeforeEach"
            SET
              m:Junit5:BeforeEach
            RETURN
              m AS BeforeMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit5:BeforeAll">
        <description>
            Labels all methods annotated by "@org.junit.jupiter.api.BeforeAll"
            with "Junit5" and "BeforeClass".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.BeforeAll"
            SET
              m:Junit5:BeforeAll
            RETURN
              m AS BeforeClassMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit5:AfterEach">
        <description>
            Labels all methods annotated by "@org.junit.jupiter.api.AfterEach"
            with "Junit5" and "After".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.AfterEach"
            SET
              m:Junit5:AfterEach
            RETURN
              m AS AfterEachMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit5:AfterAll">
        <description>
            Labels all methods annotated by "@org.junit.jupiter.api.AfterAll"
            with "Junit5" and "AfterClass".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.AfterAll"
            SET
              m:Junit5:AfterAll
            RETURN
              m AS AfterClassMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit5:TestTemplateMethod">
        <description>
            Labels all methods annotated by "@org.junit.jupiter.api.TestTemplate"
            with "Junit5", "Test" and "Template".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.TestTemplate"
            SET
              m:Junit5:Test:Template
            RETURN
              m AS AfterClassMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit5:TaggedMethod">
        <requiresConcept refId="junit5:TestMethod"/>
        <requiresConcept refId="junit5:RepeatedTestMethod"/>
        <requiresConcept refId="junit5:TestTemplateMethod"/>
        <requiresConcept refId="junit5:ParameterizedTestMethod"/>
        <description>
            Labels all methods annotated by "@org.junit.jupiter.api.Tag"
            with "Junit5", "Test" and "Tag".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method:Junit5:Test)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.jupiter.api.Tag"
            SET
              m:Junit5:Test:Tag
            RETURN
              m AS TestMethod, c AS TestClass
            UNION
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method:Test:Junit5)-[:ANNOTATED_BY]->(a:Annotation)-[:OF_TYPE]->(tags:Type),
              (a)-[:HAS]->(v:Array:Value)-[:CONTAINS]->(b:Annotation:Value)-[:OF_TYPE]->(tag:Type)
            WHERE
              tags.fqn="org.junit.jupiter.api.Tags"
              AND tag.fqn="org.junit.jupiter.api.Tag"
            SET
              m:Junit5:Test:Tag
            RETURN
              m AS TestMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit5:TaggedMethodTags">
        <description>Collects all tags of methods annotated with
            "@org.junit.jupiter.api.Tag" and "@org.junit.jupiter.api.Test"
            and stores them in an array property of the method descriptor.</description>
        <cypher><![CDATA[
            MATCH
                (c:Type:Class)-[:DECLARES]->(m:Method),
                (m:Method)-[:ANNOTATED_BY]->(a:Annotation)-[:OF_TYPE]->(tags:Type),
                (a)-[:HAS]->(v:Array:Value)-[:CONTAINS]->(b:Annotation:Value)-[:OF_TYPE]->(tag:Type),
                (b)-[:HAS]->(tagValue:Value)

            WHERE
                tags.fqn="org.junit.jupiter.api.Tags"
                AND tag.fqn="org.junit.jupiter.api.Tag"

            WITH
                collect(tagValue.value) AS tagValues, m

            SET
                m.tags = tagValues

            RETURN
                m

            UNION

            MATCH
                (c:Type:Class)-[:DECLARES]->(m:Method),
                (m:Method)-[:ANNOTATED_BY]->(a:Annotation)-[:OF_TYPE]->(t:Type),
                (a:Annotation)-[:HAS]->(v:Value)

            WHERE
                t.fqn="org.junit.jupiter.api.Tag"

            WITH
                collect(v.value) as tagValues, m

            SET
                m.tags = tagValues

            RETURN
                m
        ]]></cypher>
    </concept>


</jqa:jqassistant-rules>