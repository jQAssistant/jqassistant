<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <group id="junit4:Default">
    </group>

    <concept id="junit4:TestMethod">
        <description>Finds all test methods (i.e. annotated with "@org.junit.Test") and labels them with "Test" and
            "Junit4".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.Test"
            SET
              m:Test:Junit4
            RETURN
              m AS Test
        ]]></cypher>
    </concept>

    <concept id="junit4:TestClass">
        <requiresConcept refId="junit4:TestMethod"/>
        <description>Labels all classes containing test methods with "Test" and "Junit4".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method:Junit4:Test)
            SET
              c:Test:Junit4
            RETURN
              c AS TestClass, COLLECT(m) AS TestMethods
        ]]></cypher>
    </concept>

    <concept id="junit4:TestClassOrMethod">
        <requiresConcept refId="junit4:TestMethod"/>
        <requiresConcept refId="junit4:TestClass"/>
        <description>Finds test methods (i.e. annotated with "@org.junit.Test") and labels them and their containing
            classes with "Test" and "Junit4".
        </description>
        <deprecated>This concept has been replaced by "junit4:TestMethod" and "junit4:TestClass".</deprecated>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method:Junit4:Test)
            RETURN
              c AS TestClass, COLLECT(m) AS TestMethods
        ]]></cypher>
    </concept>

    <concept id="junit4:IgnoreTestClassOrMethod">
        <description>Labels all classes or methods annotated with "@org.junit.Ignore" with "Junit4" and "Ignore".
        </description>
        <cypher><![CDATA[
            MATCH
              (e)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.Ignore"
            SET
              e:Junit4:Ignore
            RETURN
              e AS IgnoredElement
        ]]></cypher>
    </concept>

    <concept id="junit4:BeforeMethod">
        <description>Labels all methods annotated by "@org.junit.Before" with "Junit4" and "Before".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.Before"
            SET
              m:Junit4:Before
            RETURN
              m AS BeforeMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit4:AfterMethod">
        <description>Labels all methods annotated by "@org.junit.After" with "Junit4" and "After".</description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.After"
            SET
              m:Junit4:After
            RETURN
              m AS AfterMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit4:BeforeClassMethod">
        <description>Labels all methods annotated by "@org.junit.BeforeClass" with "Junit4" and "BeforeClass".
        </description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.BeforeClass"
            SET
              m:Junit4:BeforeClass
            RETURN
              m AS BeforeClassMethod, c AS TestClass
        ]]></cypher>
    </concept>

    <concept id="junit4:AfterClassMethod">
        <description>Labels all methods annotated by "@org.junit.AfterClass" with "Junit4" and "AfterClass".
        </description>
        <cypher><![CDATA[
            MATCH
              (c:Type:Class)-[:DECLARES]->(m:Method),
              (m:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            WHERE
              a.fqn="org.junit.AfterClass"
            SET
              m:Junit4:AfterClass
            RETURN
              m AS AfterClassMethod, c AS TestClass
        ]]></cypher>
    </concept>



    <concept id="junit4:AssertMethod">
        <description>Labels all assertion methods declared by org.junit.Assert with "Junit4" and "Assert".</description>
        <cypher><![CDATA[
            MATCH
              (assertType:Type)-[:DECLARES]->(assertMethod)
            WHERE
              assertType.fqn = 'org.junit.Assert'
              and assertMethod.signature =~ 'void assert.*'
            SET
              assertMethod:Junit4:Assert
            RETURN
              assertMethod
            ]]></cypher>
    </concept>

    <concept id="junit4:SuiteClass">
        <description>Labels all classes annotated by "@org.junit.runners.Suite.SuiteClasses" with "Junit4" and "Suite" and creates a relation "CONTAINS_TESTCLASS" to all referenced classes.</description>
        <cypher><![CDATA[
            MATCH
              (suite:Type)-[:ANNOTATED_BY]->(suiteClasses)-[:OF_TYPE]->(suiteClassesType:Type)
            WHERE
              suiteClassesType.fqn = "org.junit.runners.Suite$SuiteClasses"
            SET
              suite:Junit4:Suite
            WITH
              suite, suiteClasses
            MATCH
              (suiteClasses)-[:HAS]->(:Array:Value)-[:CONTAINS]->(Class:Value)-[:IS]->(testClass:Type)
            MERGE
              (suite)-[c:CONTAINS_TESTCLASS]->(testClass)
            RETURN
              suite, collect(testClass)
      ]]></cypher>
    </concept>

</jqa:jqassistant-rules>
