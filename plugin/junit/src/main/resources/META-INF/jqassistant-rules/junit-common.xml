<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <group id="junit:Default">
        <includeConstraint refId="junit:AssertionMustProvideMessage"/>
        <includeConstraint refId="junit:IgnoreWithoutMessage"/>
        <includeConstraint refId="junit:TestMethodWithoutAssertion"/>
    </group>

    <concept id="junit:TestCaseDefinedByClass">
        <description>Creates a relation DEFINED_BY between all test cases from test reports and the class which defined it.</description>
        <cypher><![CDATA[
            MATCH
              (testcase:TestCase)
            WITH
              testcase
            MATCH
              (testclass:Type)
            WHERE
              testclass.fqn = testcase.className
            MERGE
              (testcase)-[:DEFINED_BY]->(testclass)
            RETURN
              testcase.name AS TestCase, testclass AS TestClass
    ]]></cypher>
    </concept>

    <concept id="junit:TestCaseImplementedByMethod">
        <requiresConcept refId="junit:TestCaseDefinedByClass" />
        <description>Creates a relation IMPLEMENTED_BY between all test cases from test reports and their implementing
            methods.
        </description>
        <cypher><![CDATA[
            MATCH
              (testcase:TestCase)-[:DEFINED_BY]->(testclass:Type),
              (testclass)-[:EXTENDS*0..]->(:Type)-[:DECLARES]->(testmethod:Method)
            WHERE
              testmethod.name = testcase.name
            MERGE
              (testcase)-[:IMPLEMENTED_BY]->(testmethod)
            RETURN
              testcase.name AS TestCase, testmethod as TestMethod
    ]]></cypher>
    </concept>

    <constraint id="junit:IgnoreWithoutMessage">
        <description>All @Ignore annotations must provide a message.</description>
        <cypher><![CDATA[
            MATCH
              (e)-[:ANNOTATED_BY]->(ignore:Annotation)-[:OF_TYPE]->(ignoreType:Type)
            WHERE
              ignoreType.fqn= "org.junit.Ignore"
              AND NOT (ignore)-[:HAS]->(:Value{name:"value"})
            RETURN
              e AS IgnoreWithoutMessage
            UNION
            MATCH
              (e)-[:ANNOTATED_BY]->(disabled:Annotation)-[:OF_TYPE]->(disabledType:Type)
            WHERE
              disabledType.fqn = "org.junit.jupiter.api.Disabled"
              AND NOT (disabled)-[:HAS]->(:Value{name:"value"})
            RETURN
              e AS IgnoreWithoutMessage

        ]]></cypher>
    </constraint>

    <constraint id="junit:AssertionMustProvideMessage">
        <requiresConcept refId="junit4:AssertMethod"/>
        <description>All assertions must provide a message.</description>
        <cypher><![CDATA[
            MATCH
              (testType:Type)-[:DECLARES]->(testMethod:Method),
              (testMethod)-[invocation:INVOKES]->(assertMethod:Assert:Method)
            WHERE
              NOT assertMethod.signature =~ 'void assert.*\\(java.lang.String,.*\\)'
            RETURN
              invocation AS Invocation,
              testType AS DeclaringType,
              testMethod AS Method
        ]]></cypher>
    </constraint>

    <constraint id="junit:TestMethodWithoutAssertion">
        <requiresConcept refId="junit4:TestMethod"/>
        <requiresConcept refId="junit4:AssertMethod"/>
        <requiresConcept refId="junit5:AssertMethod"/>
        <requiresConcept refId="junit5:ParameterizedTestMethod"/>
        <requiresConcept refId="junit5:RepeatedTestMethod"/>
        <requiresConcept refId="junit5:TestMethod"/>
        <description>All test methods must perform assertions (within a call hierarchy of max. 3 steps).</description>
        <cypher><![CDATA[
            MATCH
              (testType:Type)-[:DECLARES]->(testMethod:Test:Method)
            WHERE
              NOT (testMethod)-[:INVOKES*..3]->(:Method:Assert)
            RETURN
              testType AS DeclaringType,
              testMethod AS Method
        ]]></cypher>
    </constraint>



</jqa:jqassistant-rules>