<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="java:TypeAssignableFrom">
        <description>Creates a relationship ASSIGNABLE_FROM between "Type" labeled nodes if two types are assignable.</description>
        <cypher><![CDATA[
            match
              (type:Type)
            create unique
              (type)-[:ASSIGNABLE_FROM]->(type)
            with
              type
            match
              (type)-[:IMPLEMENTS|EXTENDS*]->(superType:Type)
            create unique
              (superType)-[:ASSIGNABLE_FROM]->(type)
            return count(type) as AssignableTypes
        ]]></cypher>
    </concept>

    <concept id="java:MethodOverrides">
        <requiresConcept refId="java:TypeAssignableFrom"/>
        <description>Creates a relationship OVERRIDES between two "Method" labeled nodes if one method overrides another one from a super type (i.e. the methods have the same signature).
        </description>
        <cypher><![CDATA[
            match
              (type:Type)-[:DECLARES]->(method:Method),
              (superType:Type)-[:DECLARES]->(otherMethod:Method),
              (superType)-[:ASSIGNABLE_FROM]->(type)
            where
              method.name = otherMethod.name
              AND method.signature = otherMethod.signature
              AND method.visibility <> 'private'
            create unique
              (method)-[:OVERRIDES]->(otherMethod)
            return count(method) as OverriddenMethods
        ]]></cypher>
    </concept>

    <concept id="java:InvokesOverriddenMethod">
        <requiresConcept refId="java:MethodOverrides"/>
        <requiresConcept refId="java:TypeAssignableFrom"/>
        <description>Propagates INVOKE relationships to methods implementing or overriding the invoked method.</description>
        <cypher><![CDATA[
            match
              (method:Method)-[:INVOKES]->(invokedMethod:Method),
              (overridingMethod:Method)-[:OVERRIDES]->(invokedMethod)
            create unique
              (method)-[r:INVOKES]->(overridingMethod)
            return count(r) AS OverridingInvocations
        ]]></cypher>
    </concept>

    <concept id="java:MethodOverloads">
        <description>Creates a relationship OVERLOADS between two "Method" labeled nodes if one method overloads another one from the same type (i.e. the methods
            have the same name but not the same signature).
        </description>
        <cypher><![CDATA[
            match
              (type:Type)-[:DECLARES]->(method:Method),
              (type)-[:DECLARES]->(otherMethod:Method)
            where
              method <> otherMethod
              AND method.name = otherMethod.name
              AND method.signature <> otherMethod.signature
            create unique
                (method)-[:OVERLOADS]->(otherMethod)
            return count(method) AS OverloadedMethods
        ]]></cypher>
    </concept>

    <concept id="java:Deprecated">
        <description>Labels all nodes representing deprecated elements (types, fields, methods, packages or parameters) with "Deprecated".</description>
        <cypher><![CDATA[
            match
              (e)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(dt:Type)
            where
              dt.fqn='java.lang.Deprecated'
            SET
              e:Deprecated
            return
              count(e) AS DeprecatedElements
        ]]></cypher>
    </concept>
</jqa:jqassistant-rules>