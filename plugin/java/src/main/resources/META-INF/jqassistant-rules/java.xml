<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="java:TypeAssignableFrom">
        <description>Creates a relationship ASSIGNABLE_FROM between TYPE labeled nodes if two types are assignable.</description>
        <cypher><![CDATA[
            MATCH
              (type:TYPE)
            CREATE UNIQUE
              (type)-[:ASSIGNABLE_FROM]->(type)
            WITH
              type
            MATCH
              (type)-[:IMPLEMENTS|EXTENDS*]->(superType:TYPE)
            CREATE UNIQUE
              (superType)-[:ASSIGNABLE_FROM]->(type)
            RETURN count(type) AS assignableTypes
        ]]></cypher>
    </concept>

    <concept id="java:MethodOverrides">
        <requiresConcept refId="java:TypeAssignableFrom"/>
        <description>Creates a relationship OVERRIDES between two METHOD labeled nodes if one method overrides another one from a super type (i.e. the methods
            have the same signature).
        </description>
        <cypher><![CDATA[
            MATCH
              (type:TYPE)-[:DECLARES]->(method:METHOD),
              (superType:TYPE)-[:DECLARES]->(otherMethod:METHOD),
              (superType)-[:ASSIGNABLE_FROM]->(type)
            WHERE
              method.NAME = otherMethod.NAME
              AND method.SIGNATURE = otherMethod.SIGNATURE
              AND method.VISIBILITY <> 'PRIVATE'
            CREATE UNIQUE
              (method)-[:OVERRIDES]->(otherMethod)
            RETURN count(method) AS OverriddenMethods
        ]]></cypher>
    </concept>

    <concept id="java:InvokesOverriddenMethod">
        <requiresConcept refId="java:MethodOverrides"/>
        <requiresConcept refId="java:TypeAssignableFrom"/>
        <description>Propagates INVOKE relationships to methods implementing or overriding the invoked method.</description>
        <cypher><![CDATA[
            MATCH
              (method:METHOD)-[:INVOKES]->(invokedMethod:METHOD),
              (overridingMethod:METHOD)-[:OVERRIDES]->(invokedMethod)
            CREATE UNIQUE
              (method)-[r:INVOKES]->(overridingMethod)
            RETURN count(r) AS OverridingInvocations
        ]]></cypher>
    </concept>

    <concept id="java:MethodOverloads">
        <description>Creates a relationship OVERLOADS between two METHOD labeled nodes if one method overloads another one from the same type (i.e. the methods
            have the same name but not the same signature).
        </description>
        <cypher><![CDATA[
            MATCH
              (type:TYPE)-[:DECLARES]->(method:METHOD),
              (type)-[:DECLARES]->(otherMethod:METHOD)
            WHERE
              method <> otherMethod
              AND method.NAME = otherMethod.NAME
              AND method.SIGNATURE <> otherMethod.SIGNATURE
            CREATE UNIQUE
                (method)-[:OVERLOADS]->(otherMethod)
            RETURN count(method) AS OverloadedMethods
        ]]></cypher>
    </concept>

    <concept id="java:Deprecated">
        <description>Labels all nodes representing deprecated elements (types, fields, methods, packages or parameters) with DEPRECATED.</description>
        <cypher><![CDATA[
            MATCH
              (e)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(dt:TYPE)
            WHERE
              dt.FQN='java.lang.Deprecated'
            SET
              e:DEPRECATED
            RETURN
              count(e) AS DeprecatedElements
        ]]></cypher>
    </concept>
</jqa:jqassistant-rules>