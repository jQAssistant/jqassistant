<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="dependency:Package">
        <description>Creates a DEPENDS_ON relationship between a packages if there are type dependencies between them.
        </description>
        <cypher><![CDATA[
            MATCH
                (p1:Package)-[:CONTAINS]->(t1:Type)-[:DEPENDS_ON]->(t2:Type)<-[:CONTAINS]-(p2:Package)
            WHERE
                p1<>p2
            CREATE UNIQUE
                (p1)-[:DEPENDS_ON]->(p2)
            RETURN
                p1 AS package, COUNT(DISTINCT p2) AS PackageDependencyCount
        ]]></cypher>
    </concept>

    <concept id="dependency:Artifact">
        <description>Creates a DEPENDS_ON relationship with a 'used' property between artifacts if there are type dependencies between them, i.e.
            artifact a2 contains a type which a type from an artifact a1 depends on (using the fully qualified name).
        </description>
        <cypher><![CDATA[
            MATCH
              (a1:Artifact)-[:CONTAINS]->(:Type)-[:DEPENDS_ON]->(type:Type)
            WITH
              a1,type.fqn as fqn
            MATCH
              (t2:Type)<-[:CONTAINS]-(a2:Artifact)
            WHERE
              t2.fqn=fqn
              and a1<>a2
            MERGE
              (a1)-[:DEPENDS_ON{used:true}]->(a2)
            RETURN
              a1 AS Artifact, COLLECT(DISTINCT a2.fqn) AS Dependencies
        ]]></cypher>
    </concept>

    <constraint id="dependency:PackageCycles">
        <requiresConcept refId="dependency:Package"/>
        <description>There must be no cyclic package dependencies.</description>
        <cypher><![CDATA[
            MATCH
                (p1:Package)-[:DEPENDS_ON]->(p2:Package),
                path=shortestPath((p2)-[:DEPENDS_ON*]->(p1))
            WHERE
                p1<>p2
            RETURN
                p1 AS Package, EXTRACT(p IN nodes(path) | p.fqn) AS Cycle
            ORDER BY
                Package.fqn
        ]]></cypher>
    </constraint>

    <constraint id="dependency:TypeCycles">
        <requiresConcept refId="dependency:Package"/>
        <description>There must be no cyclic type dependencies.</description>
        <cypher><![CDATA[
            MATCH
                (p1:Package)-[:DEPENDS_ON*0..1]->(p2:Package),
                shortestPath((p2)-[:DEPENDS_ON*]->(p1))
            WITH
                p1, p2
            MATCH
                (p1)-[:CONTAINS]->(t1:Type),
                (p2)-[:CONTAINS]->(t2:Type),
                (t1)-[:DEPENDS_ON]->(t2),
                path=shortestPath((t2)-[:DEPENDS_ON*]->(t1))
            WHERE
                NOT (
                  t1 = t2 OR (t1)-[:DECLARES]-(t2)
                )
            RETURN
                LENGTH(path) AS Length, EXTRACT(p IN nodes (path) | p.fqn) AS Cycle
        ]]></cypher>
    </constraint>

    <constraint id="dependency:ArtifactCycles">
        <requiresConcept refId="dependency:Artifact"/>
        <description>There must be no cyclic artifact dependencies.</description>
        <cypher><![CDATA[
            MATCH
                (a1:Artifact)-[:DEPENDS_ON]->(a2:Artifact),
                path=shortestPath((a2)-[:DEPENDS_ON*]->(a1))
            WHERE
                a1<>a2
            RETURN
                a1 AS Artifact, EXTRACT(a IN nodes(path) | a.fqn) AS Cycle
            ORDER BY
                Artifact.fqn
        ]]></cypher>
    </constraint>

</jqa:jqassistant-rules>
