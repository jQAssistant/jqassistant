<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="classpath:ResolveType">
        <description>Adds a relation "RESOLVES_TO" from a type required by an artifact to a type contained in another
            artifact if their fully qualified names match.
        </description>
        <cypher><![CDATA[
            MATCH
              (a1:Artifact)-[:REQUIRES]->(t1:Type)
            WITH
              a1, t1, t1.fqn as fqn
            MATCH
              (a2:Artifact)-[:CONTAINS]->(t2:Type)
            WHERE
              t2.fqn=t1.fqn
            MERGE
              (t1)-[:RESOLVES_TO]->(t2)
            RETURN
              count(t1) as ResolvedTypes
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveMember">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Adds a relation "RESOLVES_TO" from a member (i.e. field or method) of a type to a member of another
            type if there is a relation "RESOLVES_TO" between the two types and the members have the same signature.
        </description>
        <cypher><![CDATA[
            MATCH
              (t1:Type)-[:RESOLVES_TO]->(t2:Type),
              (t1)-[:DECLARES]->(m1),
              (t2)-[:DECLARES]->(m2)
            WHERE
              (m1:Field or m1:Method)
              and m1.signature = m2.signature
            MERGE
              (m1)-[r:RESOLVES_TO]->(m2)
            SET
              r.resolved=true
            RETURN
              count(m1) as ResolvedMembers
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveDependency">
        <requiresConcept refId="classpath:ResolveDependsOn"/>
        <description>Propagates "DEPENDS_ON" relations between types to their resolved types with a property
            "resolved:true".
        </description>
        <deprecated>This concept has been replaced by "classpath:ResolveDependsOn".</deprecated>
        <cypher><![CDATA[
            MATCH
              (t1:Type)-[:DEPENDS_ON{resolved:true}]->(t2:Type)
            RETURN
              count(*) as ResolvedDependencies
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveDependsOn">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Propagates "DEPENDS_ON" relations between types to their resolved types with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (t:Type)-[d:DEPENDS_ON]->(t1:Type)-[:RESOLVES_TO]->(t2:Type)
            MERGE
              (t)-[d1:DEPENDS_ON]->(t2)
            SET
              d1.weight=d.weight,
              d1.resolved=true
            RETURN
              count(t) as ResolvedDependencies
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveExtends">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Propagates "EXTENDS" relations between types to their resolved types with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (t:Type)-[:EXTENDS]->(t1:Type)-[:RESOLVES_TO]->(t2:Type)
            MERGE
              (t)-[e:EXTENDS]->(t2)
            SET
              e.resolved=true
            RETURN
              count(t) as ResolvedSuperClass
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveImplements">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Propagates "IMPLEMENTS" relations between types to their resolved types with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (t:Type)-[:IMPLEMENTS]->(t1:Type)-[:RESOLVES_TO]->(t2:Type)
            MERGE
              (t)-[i:IMPLEMENTS]->(t2)
            SET
              i.resolved=true
            RETURN
              count(t1) as ResolvedInterfaces
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveFieldType">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Propagates "OF_TYPE" relations between fields and types to their resolved types with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (f:Field)-[:OF_TYPE]->(:Type)-[:RESOLVES_TO]->(t:Type)
            MERGE
              (f)-[o:OF_TYPE]->(t)
            SET
              o.resolved=true
            RETURN
              count(t) as ResolvedFieldTypes
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveThrows">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Propagates "THROWS" relations between methods and types to their resolved types with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[:THROWS]->(:Type)-[:RESOLVES_TO]->(t:Type)
            MERGE
              (m)-[r:THROWS]->(t)
            SET
              r.resolved=true
            RETURN
              count(t) as ResolvedExceptionTypes
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveReturns">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Propagates "RETURNS" relations between methods and types to their resolved types with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[:RETURNS]->(:Type)-[:RESOLVES_TO]->(t:Type)
            MERGE
              (m)-[r:RETURNS]->(t)
            SET
              r.resolved=true
            RETURN
              count(t) as ResolvedReturnTypes
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveParameterType">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Propagates "OF_TYPE" relations between method parameters and types to their resolved types with a
            property "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Parameter)-[:OF_TYPE]->(:Type)-[:RESOLVES_TO]->(t:Type)
            MERGE
              (m)-[o:OF_TYPE]->(t)
            SET
              o.resolved=true
            RETURN
              count(t) as ResolvedParameterTypes
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveAnnotationType">
        <requiresConcept refId="classpath:ResolveType"/>
        <description>Propagates "OF_TYPE" relations between annotation and types to their resolved types with a
            property "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (a:Annotation)-[:OF_TYPE]->(:Type)-[:RESOLVES_TO]->(t:Type)
            MERGE
              (a)-[o:OF_TYPE]->(t)
            SET
              o.resolved=true
            RETURN
              count(t) as ResolvedAnnotationTypes
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveValue">
        <requiresConcept refId="classpath:ResolveType"/>
        <requiresConcept refId="classpath:ResolveMember"/>
        <description>Propagates "IS" relations between values and types to their resolved types with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (v:Value)-[:IS]->(e)-[:RESOLVES_TO]->(e2)
            MERGE
              (v)-[i:IS]->(e2)
            SET
              i.resolved=true
            RETURN
              count(v) as ResolvedValueTypes
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveReads">
        <requiresConcept refId="classpath:ResolveMember"/>
        <description>Propagates "READS" relations between methods and fields to their resolved fields with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[r:READS]->(f1:Field)-[:RESOLVES_TO]->(f2:Field)
            MERGE
              (m)-[r1:READS {lineNumber: r.lineNumber}]->(f2)
            SET
              r1.resolved=true
            RETURN
              count(r) as ResolvedReads
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveWrites">
        <requiresConcept refId="classpath:ResolveMember"/>
        <description>Propagates "WRITES" relations between methods and fields to their resolved fields with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[w:WRITES]->(f1:Field)-[:RESOLVES_TO]->(f2:Field)
            MERGE
              (m)-[w1:WRITES {lineNumber: w.lineNumber}]->(f2)
            SET
              w1.resolved=true
            RETURN
              count(w) as ResolvedWrites
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:ResolveInvokes">
        <requiresConcept refId="classpath:ResolveMember"/>
        <description>Propagates "INVOKES" relations between methods to their resolved methods with a property
            "resolved:true".
        </description>
        <cypher><![CDATA[
            MATCH
              (m:Method)-[i:INVOKES]->(m1:Method)-[:RESOLVES_TO]->(m2:Method)
            MERGE
              (m)-[i1:INVOKES {lineNumber: i.lineNumber}]->(m2)
            SET
              i1.resolved=true
            RETURN
              count(i) as ResolvedInvocations
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="classpath:Resolve">
        <requiresConcept refId="classpath:ResolveDependsOn"/>
        <requiresConcept refId="classpath:ResolveExtends"/>
        <requiresConcept refId="classpath:ResolveImplements"/>
        <requiresConcept refId="classpath:ResolveFieldType"/>
        <requiresConcept refId="classpath:ResolveThrows"/>
        <requiresConcept refId="classpath:ResolveReturns"/>
        <requiresConcept refId="classpath:ResolveParameterType"/>
        <requiresConcept refId="classpath:ResolveAnnotationType"/>
        <requiresConcept refId="classpath:ResolveValue"/>
        <requiresConcept refId="classpath:ResolveReads"/>
        <requiresConcept refId="classpath:ResolveWrites"/>
        <requiresConcept refId="classpath:ResolveInvokes"/>
        <description>Includes all concepts for resolving a Java classpath and returns the number of resolved elements.
        </description>
        <cypher><![CDATA[
            MATCH
              ()-[r:RESOLVES_TO]->()
            RETURN
              count(r) as ResolvedElements
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

</jqa:jqassistant-rules>
