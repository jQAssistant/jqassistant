Manual

Überblick
	- Beschreibung des Tools
		- kurzer Absatz
	- Einsatzszenarien
		- Exploration und Analyse von Software
		- Dokumentation und Absicherung von Softwarestrukturen
		- Aktives Management von Technischen Schulden
		- Diagramm: Integration in Software-Prozess inkl. SonarQube, etc.
		- Unterstützung großer Code-Basen
		- Integration in Build-Systeme
			- Maven
			- CLI
	- Architektur
		- Diagramm
			- Neo4j
			- Plugins
				- Scanner
				- Regeln
				- Reports
			- Build-System
	- First Steps
		- Überblick
			- Scan / Exploration / Analyse & Validierung
		- Maven
			- Minimal-Setup für Scan und Exploration
				- Deklaration Maven-Plugin
				- mvn jqassistant:scan jqassistant:server
				- einfache Beispiel-Abfrage
			- Setup für automatische Validierung
				- Deklaration Maven-Plugin + Default executions
				- Regel-Verzeichnis /jqassistant mit index.adoc/Spring-Boot-Regeln
				- mvn install + Ausgabe
		- Kommandozeile
			- Exploration
				- Scan-Task
					- JAR-Datei
					- Klassen-Verzeichnis
				- Server-Task
			- Automatische Validierung
				- Regel-Verzeichnis /jqassistant/rules mit index.adoc/Spring-Boot-Regeln
			- Scan/Analyze-Task + Ausgabe	
Features
	- Intuitives/erweiterbares Graphenmodell
	- flexible Abfragesprache
	- Verfügbare Scanner 
	- Regeln
		- Hohe Flexibilität
			- Abfragen in Cypher
			- Unterstützung von Scriptsprachen (Ruby/Groovy)
		- Konzepte, Constraints, Gruppen in Asciidoc/YAML/XML
		- individuell, projektspezifisch
		- Severities
			- für Warnungen oder Abbruch
			- pro Regel
			- Defaults pro Regeltyp
		- verteilbar als versionierbare Plugins
		- vordefinierte Regeln für populäre Frameworks
			- Spring, JPA, JUnit
	- Verfügbare Reports	
		- HTML
		- PlantUML-Diagramme
		- CSV
		- GraphML
	- Build-Systeme
		- Maven
		- Command Line
		- Gradle
	- Integration in andere Werkzeuge
		- SonarQube
		- Jupyter
- Lizenz
	- GPLv3 mit kurzer Beschreibung der Möglichkeiten/Limitierungen (siehe Webseite)
- Software-Strukturen als Graph
	- Modell
		- Knoten/Labels/Properties/Relationships
		- am Beispiel
	- Abfragen mit Cypher
		- Abfragen als ASCII-Art
		- Anhand von Beispielen
- Regeln
	- Arten von Regeln
		- Konzepte/Constraints/Gruppen
		- Überblick Dateitypen (Asciidoc/YAML/XML)
	- Abhängigkeiten zwischen Regeln
		- Asciidoc/YAML/XML
	- Reports
		- Erzeugung von Reports in speziellen Datei-Formaten
		- pro Regel spezifizierbar
		- Asciidoc/YAML/XML
	- Severities
		- unterstützte Severities
		- warnOnSeverity/failOnSeverity
		- Festlegung von Default-Severities für Konzepte/Constraints
		- Überschreiben von Severities in Gruppen
		- Asciidoc/YAML/XML
	- Skriptsprachen
		- Asciidoc/YAML/XML

...

Referenzdokumentation
	- Regeln
		- Asciidoc
		- YAML
		- XML
	- Maven-Plugin
		- POM-Setup & Kommandozeilenparameter
	- CLI
		- Kommandozeilenparameter
	- Plugins