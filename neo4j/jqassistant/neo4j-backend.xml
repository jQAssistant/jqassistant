<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/rule/schema/v1.4">

    <group id="neo4j-backend:Default">
        <includeConstraint refId="neo4j-backend:*" />
    </group>

    <constraint id="neo4j-backend:ApocActivatorMustDependOnAllApocProcedures">
        <requiresConcept refId="neo4j-backend:ApocActivatorDependsOnApocType" />
        <description>The APOC Activator must register all available APOC procedure types.</description>
        <!-- Verify if a dependency exists between the APOC Activator and all types declaring APOC procedures -->
        <cypher><![CDATA[
            MATCH
              (apocType:APOC:Type)-[:DECLARES]->(procedure:APOC:Procedure)
            WHERE NOT
             (:APOC:Activator)-[:DEPENDS_ON]->(apocType)
            RETURN
              procedure as UnregisteredProcedure
            ORDER BY
              apocType.fqn
        ]]></cypher>
    </constraint>

    <constraint id="neo4j-backend:ApocActivatorMustDependOnAllApocUserFunctions">
        <requiresConcept refId="neo4j-backend:ApocActivatorDependsOnApocType" />
        <description>The APOC activator must register all available APOC user function types.</description>
        <!-- Verify if a dependency exists between the APOC Activator and all types declaring APOC user functions -->
        <cypher><![CDATA[
            MATCH
              (apocType:APOC:Type)-[:DECLARES]->(userFunction:APOC:UserFunction)
            WHERE NOT
             (:APOC:Activator)-[:DEPENDS_ON]->(apocType)
            RETURN
              userFunction as UnregisteredFunction
            ORDER BY
              apocType.fqn
        ]]></cypher>
    </constraint>

    <concept id="neo4j-backend:ApocActivatorDependsOnApocType">
        <requiresConcept refId="neo4j-backend:ApocType" />
        <requiresConcept refId="neo4j-backend:ApocActivator" />
        <description>Creates a DEPENDS_ON relation between the APOC activator and all types declaring APOC functions or procedures.</description>
        <!-- The APOC jar is scanned independently of the project's classes. For that reason match all types required by the APOC activator to the APOC types and propagate the DEPENDS_ON relations. -->
        <cypher><![CDATA[
            MATCH
              (activator:APOC:Activator:Type)-[:DEPENDS_ON]->(requiredType),
              (apocType:APOC:Type)
            WHERE
              requiredType.fqn = apocType.fqn
            MERGE
              (activator)-[:DEPENDS_ON]->(apocType)
            RETURN
              apocType.fqn
        ]]></cypher>
    </concept>

    <concept id="neo4j-backend:ApocType">
        <requiresConcept refId="neo4j-backend:ApocUserFunction" />
        <requiresConcept refId="neo4j-backend:ApocProcedure" />
        <description>Labels all types declaring APOC functions or procedures with `APOC`.</description>
        <cypher><![CDATA[
            MATCH
              (apocType:Type)-[:DECLARES]->(:APOC:Method)
            SET
              apocType:APOC
            RETURN
              apocType
        ]]></cypher>
    </concept>

    <concept id="neo4j-backend:ApocUserFunction">
        <description>Labels all types annotated with "@org.neo4j.procedure.UserFunction" with `APOC` and `UserFunction`.</description>
        <cypher><![CDATA[
            MATCH
              (userFunction:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn = "org.neo4j.procedure.UserFunction"
            SET
              userFunction:APOC:UserFunction
            RETURN
              userFunction as ApocUserFunction
        ]]></cypher>
    </concept>

    <concept id="neo4j-backend:ApocProcedure">
        <description>Labels all types annotated with "@org.neo4j.procedure.Procedure" with `APOC` and `Procedure`.</description>
        <cypher><![CDATA[
            MATCH
              (procedure:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn = "org.neo4j.procedure.Procedure"
            SET
              procedure:APOC:Procedure
            RETURN
              procedure as ApocProcedure
        ]]></cypher>
    </concept>

    <concept id="neo4j-backend:ApocActivator">
        <description>Labels the type "com.buschmais.jqassistant.neo4j.backend.neo4jv3.APOCActivator with `APOC` and `Activator`.</description>
        <cypher><![CDATA[
            MATCH
              (:Artifact)-[:CONTAINS]->(activator:Type)
            WHERE
              activator.fqn = "com.buschmais.jqassistant.neo4j.backend.neo4jv3.APOCActivator"
            SET
              activator:APOC:Activator
            RETURN
              activator as APOCActivator
        ]]></cypher>
    </concept>

</jqa:jqassistant-rules>
