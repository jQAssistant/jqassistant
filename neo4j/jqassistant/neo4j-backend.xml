<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/rule/schema/v1.4">

    <group id="neo4j-backend:Default">
        <includeConstraint refId="neo4j-backend:*"/>
    </group>

    <constraint id="neo4j-backend:LibraryActivatorMustDependOnAllProcedures">
        <requiresConcept refId="neo4j-backend:LibraryActivatorDependsOnLibraryType"/>
        <description>The library activators must register all available procedure types.</description>
        <!-- Verify if a dependency exists between library activators and all types declaring procedures -->
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(libraryType:Neo4j:Library:Type)-[:DECLARES]->(:Neo4j:Procedure)
            WHERE NOT
             (:Neo4j:LibraryActivator)-[:DEPENDS_ON]->(libraryType)
            RETURN
              artifact.fileName as Artifact, collect(distinct libraryType)
            ORDER BY
              Artifact
        ]]></cypher>
    </constraint>

    <constraint id="neo4j-backend:LibraryActivatorMustDependOnAllUserFunctions">
        <requiresConcept refId="neo4j-backend:LibraryActivatorDependsOnLibraryType"/>
        <description>The library activators must register all available user function types.</description>
        <!-- Verify if a dependency exists between library activators and all types declaring library user functions -->
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(libraryType:Neo4j:Library:Type)-[:DECLARES]->(:Neo4j:UserFunction)
            WHERE NOT
             (:Neo4j:LibraryActivator)-[:DEPENDS_ON]->(libraryType)
            RETURN
              artifact.fileName as Artifact, collect(distinct libraryType)
            ORDER BY
              Artifact
        ]]></cypher>
    </constraint>

    <concept id="neo4j-backend:LibraryActivatorDependsOnLibraryType">
        <requiresConcept refId="neo4j-backend:LibraryType"/>
        <requiresConcept refId="neo4j-backend:LibraryActivator"/>
        <description>Creates a DEPENDS_ON relation between the Library activators and all types declaring library functions or
            procedures.
        </description>
        <!-- The library jars arescanned independently of the project's classes. For that reason match all types required by the activator to the library types and propagate the DEPENDS_ON relations. -->
        <cypher><![CDATA[
            MATCH
              (activator:Neo4j:LibraryActivator:Type)-[:DEPENDS_ON]->(requiredType),
              (libraryType:Neo4j:Library:Type)
            WHERE
              requiredType.fqn = libraryType.fqn
            MERGE
              (activator)-[:DEPENDS_ON]->(libraryType)
            RETURN
              libraryType.fqn
        ]]></cypher>
    </concept>

    <concept id="neo4j-backend:LibraryType">
        <requiresConcept refId="neo4j-backend:UserFunction"/>
        <requiresConcept refId="neo4j-backend:Procedure"/>
        <description>Labels all types declaring Neo4j functions or procedures with `Neo4j` and `Library`.</description>
        <cypher><![CDATA[
            MATCH
              (libraryType:Type)-[:DECLARES]->(method:Neo4j:Method)
            WHERE
              method:Procedure or method:Function
            SET
              libraryType:Neo4j:Library
            RETURN
              libraryType
        ]]></cypher>
    </concept>

    <concept id="neo4j-backend:UserFunction">
        <description>Labels all types annotated with "@org.neo4j.procedure.UserFunction" with `Neo4j` and
            `UserFunction`.
        </description>
        <cypher><![CDATA[
            MATCH
              (userFunction:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn = "org.neo4j.procedure.UserFunction"
            SET
              userFunction:Neo4j:UserFunction
            RETURN
              userFunction as UserFunction
        ]]></cypher>
    </concept>

    <concept id="neo4j-backend:Procedure">
        <description>Labels all types annotated with "@org.neo4j.procedure.Procedure" with `Neo4j` and `Procedure`.
        </description>
        <cypher><![CDATA[
            MATCH
              (procedure:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn = "org.neo4j.procedure.Procedure"
            SET
              procedure:Neo4j:Procedure
            RETURN
              procedure as Procedure
        ]]></cypher>
    </concept>

    <concept id="neo4j-backend:LibraryActivator">
        <description>Labels all types implementing "com.buschmais.jqassistant.neo4j.backend.neo4jv3.Neo4jLibraryActivator" with `Neo4j` and `LibraryActivator`
            `Activator`.
        </description>
        <cypher><![CDATA[
            MATCH
              (:Artifact)-[:CONTAINS]->(activator:Java:Class)-[:EXTENDS|IMPLEMENTS*]->(:Type{fqn:"com.buschmais.jqassistant.neo4j.backend.neo4jv3.Neo4jLibraryActivator"})
            WHERE NOT
              exists(activator.abstract)
            SET
              activator:Neo4j:LibraryActivator
            RETURN
              activator as Neo4jLibraryActivator
        ]]></cypher>
    </concept>

</jqa:jqassistant-rules>
